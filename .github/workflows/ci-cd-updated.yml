name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  PYTHON_VERSION: '3.11'
  DOCKER_IMAGE: equity-shield-advocates
  DOCKER_TAG: latest

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Bandit security scanner
      run: |
        pip install bandit
        bandit -r . -ll -ii -x tests/
    
    - name: Run dependency vulnerability scan
      uses: snyk/actions/python@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  test:
    runs-on: ubuntu-latest
    needs: security-scan
    strategy:
      matrix:
        test-group: [unit, integration, api]
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r config/requirements.txt
        pip install -r config/requirements-test.txt

    - name: Run tests
      run: |
        if [ "${{ matrix.test-group }}" = "unit" ]; then
          pytest tests/unit --junitxml=test-results/unit.xml -v
        elif [ "${{ matrix.test-group }}" = "integration" ]; then
          pytest tests/integration --junitxml=test-results/integration.xml -v
        else
          pytest tests/api --junitxml=test-results/api.xml -v
        fi
      env:
        PYTHONPATH: ${{ github.workspace }}
        TEST_ENV: ci

    - name: Upload test results
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.test-group }}
        path: test-results/*.xml

  quality:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install quality tools
      run: |
        pip install flake8 black mypy

    - name: Run linting
      run: flake8 .

    - name: Check formatting
      run: black --check .

    - name: Type checking
      run: mypy src/

  build:
    runs-on: ubuntu-latest
    needs: quality
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
          ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ github.sha }}
        cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:buildcache,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Configure SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Deploy to production
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
        DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
      run: |
        echo "Starting deployment..."
        ssh -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_HOST << 'EOF'
          # Pull latest image
          docker pull ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
          
          # Stop and remove existing container
          docker stop ${{ env.DOCKER_IMAGE }} || true
          docker rm ${{ env.DOCKER_IMAGE }} || true
          
          # Start new container
          docker run -d \
            --name ${{ env.DOCKER_IMAGE }} \
            --restart unless-stopped \
            -p 8000:8000 \
            -v /var/log/equity-shield:/var/log/equity-shield \
            -v /var/run/equity-shield:/var/run/equity-shield \
            --env-file /etc/equity-shield/production.env \
            ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
          
          # Verify deployment
          sleep 10
          if ! curl -f http://localhost:8000/health; then
            echo "Health check failed"
            exit 1
          fi
        EOF

    - name: Notify deployment status
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

name: JPMorgan Integration CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'src/jpmorgan_*'
      - '.github/workflows/jpmorgan-integration.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/jpmorgan_*'
      - '.github/workflows/jpmorgan-integration.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'sandbox'
        type: choice
        options:
          - sandbox
          - staging
          - production

env:
  JPMORGAN_SANDBOX_URL: https://sandbox.api.jpmorgan.com
  JPMORGAN_PROD_URL: https://api.jpmorgan.com

jobs:
  test-jpmorgan-integration:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'sandbox' }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r config/requirements.txt

      - name: Set up JPMorgan test credentials
        run: |
          if [ "${{ github.event.inputs.environment || 'sandbox' }}" = "production" ]; then
            echo "JPMORGAN_CLIENT_ID=${{ secrets.JPMORGAN_PROD_CLIENT_ID }}" >> $GITHUB_ENV
            echo "JPMORGAN_CLIENT_SECRET=${{ secrets.JPMORGAN_PROD_CLIENT_SECRET }}" >> $GITHUB_ENV
            echo "JPMORGAN_API_KEY=${{ secrets.JPMORGAN_PROD_API_KEY }}" >> $GITHUB_ENV
            echo "JPMORGAN_WEBHOOK_SECRET=${{ secrets.JPMORGAN_PROD_WEBHOOK_SECRET }}" >> $GITHUB_ENV
          else
            echo "JPMORGAN_CLIENT_ID=${{ secrets.JPMORGAN_SANDBOX_CLIENT_ID }}" >> $GITHUB_ENV
            echo "JPMORGAN_CLIENT_SECRET=${{ secrets.JPMORGAN_SANDBOX_CLIENT_SECRET }}" >> $GITHUB_ENV
            echo "JPMORGAN_API_KEY=${{ secrets.JPMORGAN_SANDBOX_API_KEY }}" >> $GITHUB_ENV
            echo "JPMORGAN_WEBHOOK_SECRET=${{ secrets.JPMORGAN_WEBHOOK_SECRET }}" >> $GITHUB_ENV
          fi
          echo "JPMORGAN_PRIVATE_KEY_PATH=/tmp/jpmorgan_private_key.pem" >> $GITHUB_ENV

      - name: Create test private key
        run: |
          echo "${{ secrets.JPMORGAN_PRIVATE_KEY }}" > /tmp/jpmorgan_private_key.pem
          chmod 600 /tmp/jpmorgan_private_key.pem

      - name: Run JPMorgan integration tests
        run: |
          python -m pytest tests/test_jpmorgan_integration.py -v

      - name: Run webhook tests
        run: |
          python -m pytest tests/test_jpmorgan_webhooks.py -v

      - name: Run sync tests
        run: |
          python -m pytest tests/test_jpmorgan_sync.py -v

  deploy-to-jpmorgan-sandbox:
    needs: test-jpmorgan-integration
    runs-on: ubuntu-latest
    environment: sandbox
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker image
        id: build
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: equity-shield-jpmorgan
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Update JPMorgan sandbox deployment
        run: |
          aws ecs update-service \
            --cluster jpmorgan-sandbox-cluster \
            --service equity-shield-jpmorgan-service \
            --force-new-deployment \
            --region us-east-1

      - name: Wait for deployment to complete
        run: |
          aws ecs wait services-stable \
            --cluster jpmorgan-sandbox-cluster \
            --services equity-shield-jpmorgan-service \
            --region us-east-1

      - name: Run post-deployment tests
        run: |
          # Test API connectivity
          curl -f https://sandbox.api.equity-shield-advocates.com/health || exit 1

          # Test JPMorgan integration endpoints
          curl -H "X-API-KEY: ${{ secrets.JPMORGAN_SANDBOX_API_KEY }}" \
               https://sandbox.api.equity-shield-advocates.com/api/jpmorgan/accounts || exit 1

  deploy-to-production:
    needs: deploy-to-jpmorgan-sandbox
    runs-on: ubuntu-latest
    environment: production
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - uses: actions/checkout@v3

      - name: Manual approval required
        run: |
          echo "Production deployment requires manual approval"
          echo "Please review the sandbox deployment and approve if ready"
          # Note: In a real scenario, use GitHub Environments with required reviewers for approval

      - name: Configure AWS credentials for production
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_PROD_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_PROD_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker image for production
        id: build-prod
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: equity-shield-jpmorgan-prod
          IMAGE_TAG: ${{ github.sha }}-prod
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Update JPMorgan production deployment
        run: |
          aws ecs update-service \
            --cluster jpmorgan-production-cluster \
            --service equity-shield-jpmorgan-prod-service \
            --force-new-deployment \
            --region us-east-1

      - name: Wait for production deployment to complete
        run: |
          aws ecs wait services-stable \
            --cluster jpmorgan-production-cluster \
            --services equity-shield-jpmorgan-prod-service \
            --region us-east-1

      - name: Run post-deployment tests for production
        run: |
          # Test API connectivity
          curl -f https://api.equity-shield-advocates.com/health || exit 1

          # Test JPMorgan integration endpoints
          curl -H "X-API-KEY: ${{ secrets.JPMORGAN_PROD_API_KEY }}" \
               https://api.equity-shield-advocates.com/api/jpmorgan/accounts || exit 1

  notify-jpmorgan:
    needs: [test-jpmorgan-integration, deploy-to-jpmorgan-sandbox]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Send notification to JPMorgan
        run: |
          # Send webhook notification to JPMorgan systems
          curl -X POST ${{ secrets.JPMORGAN_NOTIFICATION_WEBHOOK }} \
            -H "Content-Type: application/json" \
            -d '{
              "event": "equity_shield_deployment",
              "status": "${{ needs.test-jpmorgan-integration.result }}",
              "environment": "sandbox",
              "commit": "${{ github.sha }}",
              "timestamp": "'$(date -Iseconds)'"
            }'
